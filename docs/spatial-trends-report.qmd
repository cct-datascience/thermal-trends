---
title: "Spatial Trends Through Time"
author: "Eric R. Scott"
format: html
editor: visual
execute: 
  echo: false
---

```{r}
#| label: setup
#| include: false
library(targets)
library(knitr)
library(here)
library(car)
library(terra)
library(tidyverse)
library(ggpattern)
library(tidyterra)
library(mgcv)
library(gratia)
library(sf)
library(colorspace)
library(patchwork)
library(flextable)
library(marginaleffects)

tar_load(doy_trend_50, store = here("_targets/"))
tar_load(gdd_doy_stack_50, store = here("_targets/"))
```

The goal is to understand spatial trends in phenology over time using data on the DOY that various threshold GDD are reached in the Northeastern US.

## Pixel-wise regression

A simple option is to run a regression for every pixel in the map, with one data point per year per GDD threshold.
We can then map the slopes easily (@fig-trend-map).

![Map of slopes from pixel-wise linear regressions of DOY to reach 50 GDD over time from 1981 to 2023](slopes_50.png){#fig-trend-map}

However, we if we mask out areas that have slopes that are not statistically significantly different from zero, almost nothing is left (@fig-trend-map-hatched).
This is because the large number of p-values calculated must be corrected for false discovery rate, as they are not independent, leaving little statistical power to detect trends.

```{r}
#| label: fig-trend-map-hatched
#| fig-cap: "Map of slopes with regions of non-significant slopes marked by hatching"

non_sig <- 
  as.polygons(doy_trend_50[["p.value"]] < 0.05) |>
  filter(p.value == 0)  |>
  mutate(p.value = as.factor(p.value))

ggplot() +
  geom_spatraster(data = doy_trend_50, aes(fill = slope)) +
  geom_sf_pattern(
    data = st_as_sf(non_sig),
    aes(pattern_fill = ""), #TODO trick to get legend to show up, but there's a new way to do this in ggplot2 I think
    pattern = "crosshatch",
    fill = NA,
    colour = NA,
    pattern_alpha = 0.5, #maybe not necessary
    pattern_size = 0.05, #make lines smaller
    pattern_spacing = 0.01, #make lines closer together
    pattern_res = 200, #make lines less pixelated
  ) +
  scale_pattern_fill_manual("p > 0.05", values = c("grey30")) +
  scale_fill_continuous_diverging(na.value = "transparent", rev = TRUE) +
  labs(fill = "∆DOY") +
  theme_minimal() 
```

## Spatial GAMs

Generalized Additive Models (GAMs) are an alternative method that can take into account the non-independence of spatial data, but are still able to model trends in phenology over time, potentially with different slopes by region.

GAMs fit penalized smooths to data capturing non-linear relationships with a statistically optimized amount of wiggliness.
Two-dimensional smoothers can be used to capture spatial variation in data (with dimensions of lat/lon).
Furthermore, we can model complex interactions including three-way interactions between latitude, longitude, and time.

::: callout-note
For these examples, data has been down-sampled for prototyping to speed up the model fitting process.
:::

```{r}
doy_df <-
  #downsample spatially for testing
  aggregate(gdd_doy_stack_50, fact = 8) |> 
  as_tibble(xy = TRUE, na.rm = TRUE) |>
  pivot_longer(
    c(-x,-y),
    names_to = "year",
    values_to = "doy",
    names_transform = list(year = as.numeric)
  ) |> 
  mutate(year_scaled = year - min(year))
```

A simple example spatial GAM (@lst-gam-simple, @fig-gam-simple) shows how you can capture spatial trends with a two-dimensional smoother.

```{r}
#| lst-label: lst-gam-simple
#| lst-cap: "A simple spatial GAM fit with the `mgcv` package where year is included as a parametric term with no interaction with lat/lon."
#| echo: true
#| 
m1 <-
  gam(
    doy ~ year_scaled + te(x, y),
    data = doy_df,
    method = "REML"
  )
```

```{r}
#| label: fig-gam-simple
#| message: false
#| fig-cap: "Partial effects from a simple GAM with lat/lon fit as a bivariate smoother (A) and time as a parametric effect (B) and no interaction."
m1_draw <- draw(m1, parametric = TRUE, wrap = FALSE)
((m1_draw[[1]] + coord_sf(crs = crs(doy_trend_50))) |
(m1_draw[[2]])) + plot_annotation(tag_levels = "A")
```

In @fig-gam-simple A, there is spatial variation in DOY to reach 50 GDD with the north reaching that threshold later than the south.
In addition, there is a general negative trend of DOY over time (@fig-gam-simple B).

In my exploration, the GAM that had the best fit to data (by dAIC) included a single, complex smooth term that accounted for an interaction between space and time, allowing a wiggly trend through time that potentially varies spatially (@lst-gam-best, @fig-gam-best).

```{r}
#| lst-label: lst-gam-best
#| lst-cap: "The best fit GAM model, among several candidates tested.  The interaction between space and time is fit as a tensor product spline with one dimension being a two-dimensional smooth of latitude and longitude fit with a 'spline on the sphere' basis (`'sos'`) and the other dimension being year fit with a cubic spline with shrinkage (`'cs'`)."
#| label: tbl-gam-summary
#| tbl-cap: "Output of `summary()` for a simple spatial GAM"
#| echo: true
m3a <- gam(
  doy ~ te(y, x, year_scaled, d = c(2, 1), bs = c("sos", "cs")),
  data = doy_df,
  method = "REML"
)
as_flextable(m3a)
```

In the @tbl-gam-summary, the smooth term is significant, although that doesn't tell us if there are temporal trends, spatial trends, or both.
A partial effects plot, such as in @fig-gam-best, helps a little, but is still difficult to interpret.

```{r}
#| label: fig-gam-best
#| message: false
#| fig-cap: "Partial effects from best-fit GAM.  Facets represent change in spatial relationship over time from year 0 to year 42."
draw(m3a) & coord_flip()
```

If we just look at a single pixel of the map, we can see that the trend through time is non-linear (@fig-slice).
For each pixel, we can calculate the *average* slope of that wiggly line and test whether it is different from 0 with the `marginaleffects` package.
In @fig-gam-slopes-map, these average slopes are plotted with non-significant slopes hatched out like in @fig-trend-map-hatched.
However, with this approach, we maintain more statistical power, even when p-values are corrected for false discovery rate.

```{r}
#| label: fig-slice
#| fig-cap: "Fitted relationship (black line) ± 99% confidence interval (grey ribbon) between year and DOY to reach 50 GDD for a single pixel of the downsampled data. Actual values of DOY are displayed as points."

data_slice <-
  doy_df |>
  filter(y == min(y, na.rm =TRUE)) |>
  filter(x == min(x, na.rm =TRUE))

doy_pred <- fitted_values(m3a, data_slice, unconditional = TRUE, ci_level = 0.99)

ggplot(doy_pred, aes(x = year_scaled, y = .fitted)) +
  geom_line() +
  geom_point(aes(y = doy)) +
  geom_ribbon(aes(ymin = .lower_ci, ymax = .upper_ci), alpha = 0.4) +
  labs(x = "Year", y = "DOY", title = "Effect of year at 75.27ºW, 39.64ºN")

```

```{r}
#| label: fig-gam-slopes-map
#| fig-cap: "Map of average slopes of DOY over time from a spatial GAM fit to downsampled data. P-values for slopes are false-discovery-rate adjusted using the sample size for the full data (n = 21414)"

n_true <- 21414 #number of values in original data before down-scaling
m3a_slopes <- 
  avg_slopes(
    m3a,
    variables = "year_scaled",
    by = c("y", "x"),
    df = insight::get_df(m3a) #TODO: not sure if this is appropriate
  ) 

m3a_slopes_rast <- 
  m3a_slopes |>
  as_tibble() |> 
  mutate(p.value = p.adjust(p.value, "fdr", n = n_true)) |> 
  select(x, y, estimate, p.value) |> 
  rast()

crs(m3a_slopes_rast) <- crs(gdd_doy_stack_50)

non_sig <- m3a_slopes_rast |> 
  mutate(non_sig = ifelse(p.value > 0.05, TRUE, NA)) |> 
  select(non_sig) |> 
  as.polygons() |> 
  st_as_sf()

ggplot() +
  geom_spatraster(data = m3a_slopes_rast, aes(fill = estimate)) +
  scale_fill_continuous_diverging(na.value = "transparent", rev = TRUE) +
  geom_sf_pattern(
    data = non_sig,
    aes(pattern_fill = ""), #TODO trick to get legend to show up, but there's a new way to do this in ggplot2 I think
    pattern = "crosshatch",
    fill = NA,
    colour = NA,
    pattern_alpha = 0.5, #maybe not necessary
    pattern_size = 0.05, #make lines smaller
    pattern_spacing = 0.01, #make lines closer together
    pattern_res = 200, #make lines less pixelated
  ) +
  scale_pattern_fill_manual(values = c("grey30")) +
  labs(title = "Estimated change in DOY over time for 50 GDD threshold", 
       fill = "∆DOY/yr", pattern_fill = "p > 0.05") +
  coord_sf() +
  theme_minimal()
```

With the approach in @fig-gam-slopes-map, we have the power to detect significant decrease in the DOY to reach 50 GDD over time.
The caveat here is that the relationship fit to time is not linear (see @fig-slice for an example), and @fig-gam-slopes-map just shows the *average* slope over time.
